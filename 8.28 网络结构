# # coding:utf8
# from torch import nn
#
#
# class NetG(nn.Module):
#     """
#     生成器定义
#     """
#
#     def __init__(self, opt):
#         super(NetG, self).__init__()
#         ngf = opt.ngf  # 生成器feature map数
#
#         self.main = nn.Sequential(
#             # 输入是一个nz维度的噪声，我们可以认为它是一个1*1*nz的feature map
#             nn.ConvTranspose2d(opt.nz, ngf * 8, 4, 1, 0, bias=False),
#             nn.BatchNorm2d(ngf * 8),
#             nn.ReLU(True),
#             # 上一步的输出形状：(ngf*8) x 4 x 4
#
#             nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),
#             nn.BatchNorm2d(ngf * 4),
#             nn.ReLU(True),
#             # 上一步的输出形状： (ngf*4) x 8 x 8
#
#             nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),
#             nn.BatchNorm2d(ngf * 2),
#             nn.ReLU(True),
#             # 上一步的输出形状： (ngf*2) x 16 x 16
#
#             nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 1, bias=False),
#             nn.BatchNorm2d(ngf),
#             nn.ReLU(True),
#             # 上一步的输出形状：(ngf) x 32 x 32
#
#             nn.ConvTranspose2d(ngf, 3, 5, 3, 1, bias=False),
#             nn.Tanh()  # 输出范围 -1~1 故而采用Tanh
#             # 输出形状：3 x 96 x 96
#         )
#
#     def forward(self, input):
#         return self.main(input)


# class NetD(nn.Module):
#     """
#     判别器定义
#     """
#
#     def __init__(self, opt):
#         super(NetD, self).__init__()
#         ndf = opt.ndf
#         self.main = nn.Sequential(
#
#
#         # 输入 3 x 96 x 96
#         nn.Conv2d(3, ndf, 5, 3, 1, bias=False),
#         nn.LeakyReLU(0.2, inplace=True),
#         # 输出 (ndf) x 32 x 32
#
#         nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
#         nn.BatchNorm2d(ndf * 2),
#         nn.LeakyReLU(0.2, inplace=True),
#         # 输出 (ndf*2) x 16 x 16
#
#         nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
#         nn.BatchNorm2d(ndf * 4),
#         nn.LeakyReLU(0.2, inplace=True),
#         # 输出 (ndf*4) x 8 x 8
#
#         nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
#         nn.BatchNorm2d(ndf * 8),
#         nn.LeakyReLU(0.2, inplace=True),
#         # 输出 (ndf*8) x 4 x 4
#
#         nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
#         nn.Sigmoid()  # 输出一个数(概率)
#  )
#
#
#     def forward(self, input):
#
#
#         return self.main(input).view(-1)
#


# coding:utf8
from torch import nn


class NetG(nn.Module):
    """
    生成器定义
    """

    def __init__(self, opt):
        super(NetG, self).__init__()
        ngf = opt.ngf  # 生成器feature map数

        self.main = nn.Sequential(
            # 输入是一个nz维度的噪声，我们可以认为它是一个1*1*nz的feature map
            # nn.ConvTranspose2d(opt.nz, ngf * 8, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 8),
            # nn.ReLU(True),
            # # 上一步的输出形状：(ngf*8) x 4 x 4
            #
            # nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            # # 上一步的输出形状： (ngf*4) x 8 x 8
            #
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # # 上一步 16 x 16
            # nn.ConvTranspose2d(ngf * 2, ngf * 4, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            # # 上一步 32 x 32
            #
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # # 上一步 64 x 64
            #
            # nn.ConvTranspose2d(ngf * 2, ngf * 4, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            # # 上一步 128 x 128
            #
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # # 上一步 256 x 256
            #
            # #  256
            # nn.ConvTranspose2d(ngf * 2, ngf * 4, 3, 2, 0, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            #
            # # 513
            #
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 3, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            #
            # # 515
            # nn.ConvTranspose2d(ngf * 2, ngf * 4, 3, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            #
            #
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 5, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 2, ngf * 4, 5, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 5, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 2, ngf * 2, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 2, ngf * 2, 5, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 2, ngf * 4, 5, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 5, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf * 2, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # nn.ConvTranspose2d(ngf, 3, 4, 1, 0, bias=False),
            # nn.Tanh()

            nn.ConvTranspose2d(opt.nz, ngf * 2, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf * 2, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf * 2, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf * 2, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf * 2, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf * 2, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf * 4, 3, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 4),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf, ngf, 5, 3, 1, bias=False),
            nn.BatchNorm2d(ngf),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf, 3, 5, 3, 1, bias=False),
            nn.Tanh()  # 输出范围 -1~1 故而采用Tanh

            # nn.ConvTranspose2d(ngf * 2, 3, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf * 4),
            # nn.ReLU(True),
            # # 上一步 512 x 512
            #
            # nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            # nn.BatchNorm2d(ngf * 2),
            # nn.ReLU(True),  # 1024 x 1024
            # # 上一步的输出形状： (ngf*2) x 16 x 16
            #
            # # nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 1, bias=False),
            # # nn.BatchNorm2d(ngf),
            # # nn.ReLU(True),
            # # # 上一步的输出形状：(ngf) x 32 x 32
            #
            # nn.ConvTranspose2d(ngf * 2, 3, 77, 1, 0, bias=False),
            # nn.Tanh()
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1027
            #
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            #
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf*2, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, ngf, 4, 1, 0, bias=False),
            # nn.BatchNorm2d(ngf),
            # nn.ReLU(True),
            # # 1030
            # nn.ConvTranspose2d(ngf, 3, 4, 1, 0, bias=False),
            # nn.Tanh()
            # # # 1030

            # nn.ConvTranspose2d(ngf, 3, 5, 3, 1, bias=False),
            # nn.Tanh()  # 输出范围 -1~1 故而采用Tanh
            # 输出形状：3 x 96 x 96
        )

    def forward(self, input):
        return self.main(input)


#  self
class NetD(nn.Module):
    """
    判别器定义
    """

    def __init__(self, opt):
        super(NetD, self).__init__()
        ndf = opt.ndf

        # self.main = nn.Sequential(

        # self.conv1 = nn.Conv2d(3, 3, 5, 3, 1, bias=False)
        # self.lr1 = nn.LeakyReLU(0.2, inplace=True)

        self.conv2 = nn.Conv2d(3, ndf, 5, 3, 1, bias=False)
        self.lr2 = nn.LeakyReLU(0.2, inplace=True)

        # 输入 3 x 96 x 96
        self.conv3 = nn.Conv2d(ndf, ndf, 5, 3, 1, bias=False)
        self.lr3 = nn.LeakyReLU(0.2, inplace=True)
        # 输出 (ndf) x 32 x 32

        self.conv4 = nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False)
        self.bn1 = nn.BatchNorm2d(ndf * 2)
        self.lr4 = nn.LeakyReLU(0.2, inplace=True)
        # 输出 (ndf*2) x 16 x 16

        self.conv5 = nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False)
        self.bn2 = nn.BatchNorm2d(ndf * 4)
        self.lr5 = nn.LeakyReLU(0.2, inplace=True)
        # 输出 (ndf*4) x 8 x 8

        self.conv6 = nn.Conv2d(ndf * 4, ndf * 2, 3, 1, 0, bias=False)
        self.bn3 = nn.BatchNorm2d(ndf * 2)
        self.lr6 = nn.LeakyReLU(0.2, inplace=True)

        self.conv7 = nn.Conv2d(ndf * 2, ndf * 2, 3, 1, 0, bias=False)
        self.bn4 = nn.BatchNorm2d(ndf * 2)
        self.lr7 = nn.LeakyReLU(0.2, inplace=True)

        self.conv8 = nn.Conv2d(ndf * 2, ndf * 2, 3, 1, 0, bias=False)
        self.bn5 = nn.BatchNorm2d(ndf * 2)
        self.lr8 = nn.LeakyReLU(0.2, inplace=True)

        self.conv9 = nn.Conv2d(ndf * 2, ndf * 2, 3, 1, 0, bias=False)
        self.bn6 = nn.BatchNorm2d(ndf * 2)
        self.lr9 = nn.LeakyReLU(0.2, inplace=True)

        self.conv10 = nn.Conv2d(ndf * 2, ndf * 2, 3, 1, 0, bias=False)
        self.bn7 = nn.BatchNorm2d(ndf * 2)
        self.lr10 = nn.LeakyReLU(0.2, inplace=True)

        self.conv11 = nn.Conv2d(ndf * 2, ndf * 2, 3, 1, 0, bias=False)
        self.bn8 = nn.BatchNorm2d(ndf * 2)
        self.lr11 = nn.LeakyReLU(0.2, inplace=True)

        self.conv12 = nn.Conv2d(ndf * 2, 1, 3, 1, 0, bias=False)
        self.sigmoid = nn.Sigmoid()  # 输出一个数(概率)

        # self.bn3 = nn.BatchNorm2d(ndf * 8)
        # self.lr6 = nn.LeakyReLU(0.2, inplace=True)
        # # 输出 (ndf*8) x 4 x 4
        #
        # self.conv7 = nn.Conv2d(ndf * 8, 1, 15, 1, 0, bias=False)
        # self.sigmoid = nn.Sigmoid()  # 输出一个数(概率)

        # self.conv6 = nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False)
        # self.bn3 = nn.BatchNorm2d(ndf * 8)
        # self.lr6 = nn.LeakyReLU(0.2, inplace=True)
        # # 输出 (ndf*8) x 4 x 4
        #
        # self.conv7 = nn.Conv2d(ndf * 8, 1, 15, 1, 0, bias=False)
        # self.sigmoid = nn.Sigmoid()  # 输出一个数(概率)

        # )

    def forward(self, input):
        # input = self.conv1(input)
        # input = self.lr1(input)

        input = self.conv2(input)
        input = self.lr2(input)

        input = self.conv3(input)
        input = self.lr3(input)

        input = self.conv4(input)
        input = self.bn1(input)
        input = self.lr4(input)

        input = self.conv5(input)
        input = self.bn2(input)
        input = self.lr5(input)

        input = self.conv6(input)
        input = self.bn3(input)
        input = self.lr6(input)

        input = self.conv7(input)
        input = self.bn4(input)
        input = self.lr7(input)

        input = self.conv8(input)
        input = self.bn5(input)
        input = self.lr8(input)

        input = self.conv9(input)
        input = self.bn6(input)
        input = self.lr9(input)

        input = self.conv10(input)
        input = self.bn7(input)
        input = self.lr10(input)

        input = self.conv11(input)
        input = self.bn8(input)
        input = self.lr11(input)
        input = self.conv12(input)

        # input = self.bn3(input)
        # input = self.lr6(input)
        #
        # # print("self.conv6", input.shape)
        #
        # input = self.conv7(input)
        input = self.sigmoid(input)
        # print("self.conv7", input.shape)

        return input.view(-1)

        # return self.main(input).view(-1)
